import random
import time

def print_welcome():
    print("\nWelcome To My Final Submission!")
    text = "\nThe Numbers Game"
    print("\033[1m", end='')

    underline_byte = b'\xcc\xb2'
    underline = str(underline_byte, 'utf-8')
    for x in text:
        if not x.isspace():
            print(x + underline, end='')
        else:
            print(x, end='')
    print("\n\nInstructions")
    print("\n1: Input First Name", "\n2: Input Last Initial", "\n3: Have fun!!\n")

def get_user_info():
    first_name = input("Insert first name: ")
    last_initial = input("Insert last initial: ")
    print(f"\n\nWelcome to my game, {first_name} {last_initial}")
    return first_name, last_initial

def get_sudoku_board():
    board = []
    print("Enter the Sudoku board row by row, using 0 for empty spaces.")
    for i in range(9):
        while True:
            try:
                row = list(map(int, input(f"Row {i+1}: ").strip().split()))
                if len(row) != 9 or any(num not in range(10) for num in row):
                    raise ValueError
                board.append(row)
                break
            except ValueError:
                print("Invalid input. Please enter 9 digits (0-9) separated by spaces.")
    return board

def print_board(board):
    for i in range(len(board)):
        if i % 3 == 0:
            if i == 0:
                print("┎───────────────────────┒")
            else:
                print("┠───────────────────────┨")

        for j in range(len(board[0])):
            if j % 3 == 0:
                print("┃", end=" ")
            print(board[i][j] if board[i][j] != 0 else ".", end=" ")
        print("┃")

    print("└───────────────────────┘")

def solve(board):
    find = find_empty(board)
    if not find:
        return True
    else:
        row, col = find

    for num in range(1, 10):
        if valid(board, num, (row, col)):
            board[row][col] = num

            if solve(board):
                return True

            board[row][col] = 0

    return False

def find_empty(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)  # row, col
    return None

def valid(board, num, pos):
    # Check row
    for i in range(len(board[0])):
        if board[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False

    # Check 3x3 box
    box_x = pos[1] // 3
    box_y = pos[0] // 3
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == num and (i, j) != pos:
                return False

    return True

def main():
    print_welcome()
    first_name, last_initial = get_user_info()
    sudokuboard = get_sudoku_board()

    print("\nInitial Sudoku Board:")
    print_board(sudokuboard)

    if solve(sudokuboard):
        print("\nSolved Sudoku Board:")
        print_board(sudokuboard)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    main()
